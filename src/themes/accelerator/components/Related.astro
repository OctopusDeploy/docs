---
// warning: This file is overwritten by Astro Accelerator

import { PostFiltering, PostOrdering, Accelerator } from 'astro-accelerator-utils';
import type { Frontmatter } from 'astro-accelerator-utils/types/Frontmatter';
import { SITE } from '@config';
import type { MarkdownInstance } from 'astro';
import { getImageInfo } from '@util/custom-markdown.mjs'

import AuthorsMini from '@components/AuthorsMini.astro';

const accelerator = new Accelerator(SITE);
const stats = new accelerator.statistics('accelerator/components/Related.astro');
stats.start();

// Properties
type Props = {
  lang: string;
  frontmatter: Frontmatter
  headings: { depth: number; slug: string; text: string; }[];
};
const { lang, frontmatter, headings } = Astro.props satisfies Props;

// Logic
let relatedPosts: MarkdownInstance<Record<string, any>>[] = [];
const parentCagory = (frontmatter.categories ?? [null])[0];

if (parentCagory != null) {
  const allPages = accelerator.posts.all().filter(PostFiltering.isListable);
  const allPosts = allPages
    .filter(p => p.frontmatter.title != frontmatter.title && p.frontmatter.categories && p.frontmatter.categories.includes(parentCagory))
    .sort(PostOrdering.sortByPubDateDesc)
  
  // One "Most Recent" Post
  if (allPosts.length > 0) {
    relatedPosts.push(allPosts[0])
  }

  const olderPost = allPosts.slice(1).filter(p => p.frontmatter.pubDate < frontmatter.pubDate)
  
  // One "Older than current" Post
  if (olderPost.length > 0) {
    relatedPosts.push(olderPost[0])
  } else if (allPosts.length > 1) {
    relatedPosts.push(allPosts[1])
  }
}

const articles = relatedPosts.map(p => {
  return {
    url: p.url,
    frontmatter: p.frontmatter,
    img: p.frontmatter.bannerImage
      ? getImageInfo(p.frontmatter.bannerImage.src, '', SITE.images.listerSize)
      : null
  };
});

stats.stop();
---
{articles.length > 0 &&
<ul class="post-list anim-show-parent">
  {articles.map((post) => (
  <li class="list-item" data-destination={ accelerator.urlFormatter.formatAddress(post.url) } data-image={ (post.frontmatter.bannerImage?.src.length > 0).toString() }>
    <article>
      <div class="list-item-image">
      {post.img && (
        <img
          srcset={ post.img.srcset }
          sizes={ post.img.sizes }
          src={ post.img.src }
          alt={ post.frontmatter.bannerImage.alt }
          class={ post.img.class }
          width={ post.img.metadata?.width }
          height={ post.img.metadata?.height }
          loading="lazy" />
      )}
      </div>
      <div class="list-item-content">
        <h3>
          <a href={ accelerator.urlFormatter.formatAddress(post.url) }>{ post.frontmatter.title }</a>
        </h3>
        <AuthorsMini lang={ lang } frontmatter={ post.frontmatter as Frontmatter } />
      </div>
    </article>
  </li>
  ))}
</ul>
}