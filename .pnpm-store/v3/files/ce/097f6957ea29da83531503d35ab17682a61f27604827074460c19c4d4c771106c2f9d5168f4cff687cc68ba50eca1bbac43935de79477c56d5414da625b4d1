{"version":3,"file":"css-vars-ponyfill.esm.min.js","sources":["../node_modules/get-css-data/dist/get-css-data.esm.js","../node_modules/balanced-match/index.js","../src/parse-css.js","../src/parse-vars.js","../src/stringify-css.js","../src/transform-css.js","../src/walk-css.js","../src/index.js"],"sourcesContent":["/*!\n * get-css-data\n * v1.6.3\n * https://github.com/jhildenbiddle/get-css-data\n * (c) 2018-2019 John Hildenbiddle <http://hildenbiddle.com>\n * MIT license\n */\nfunction getUrls(urls) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var settings = {\n        mimeType: options.mimeType || null,\n        onBeforeSend: options.onBeforeSend || Function.prototype,\n        onSuccess: options.onSuccess || Function.prototype,\n        onError: options.onError || Function.prototype,\n        onComplete: options.onComplete || Function.prototype\n    };\n    var urlArray = Array.isArray(urls) ? urls : [ urls ];\n    var urlQueue = Array.apply(null, Array(urlArray.length)).map(function(x) {\n        return null;\n    });\n    function isValidCss() {\n        var cssText = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        var isHTML = cssText.trim().charAt(0) === \"<\";\n        return !isHTML;\n    }\n    function onError(xhr, urlIndex) {\n        settings.onError(xhr, urlArray[urlIndex], urlIndex);\n    }\n    function onSuccess(responseText, urlIndex) {\n        var returnVal = settings.onSuccess(responseText, urlArray[urlIndex], urlIndex);\n        responseText = returnVal === false ? \"\" : returnVal || responseText;\n        urlQueue[urlIndex] = responseText;\n        if (urlQueue.indexOf(null) === -1) {\n            settings.onComplete(urlQueue);\n        }\n    }\n    var parser = document.createElement(\"a\");\n    urlArray.forEach(function(url, i) {\n        parser.setAttribute(\"href\", url);\n        parser.href = String(parser.href);\n        var isIElte9 = Boolean(document.all && !window.atob);\n        var isIElte9CORS = isIElte9 && parser.host.split(\":\")[0] !== location.host.split(\":\")[0];\n        if (isIElte9CORS) {\n            var isSameProtocol = parser.protocol === location.protocol;\n            if (isSameProtocol) {\n                var xdr = new XDomainRequest();\n                xdr.open(\"GET\", url);\n                xdr.timeout = 0;\n                xdr.onprogress = Function.prototype;\n                xdr.ontimeout = Function.prototype;\n                xdr.onload = function() {\n                    if (isValidCss(xdr.responseText)) {\n                        onSuccess(xdr.responseText, i);\n                    } else {\n                        onError(xdr, i);\n                    }\n                };\n                xdr.onerror = function(err) {\n                    onError(xdr, i);\n                };\n                setTimeout(function() {\n                    xdr.send();\n                }, 0);\n            } else {\n                console.warn(\"Internet Explorer 9 Cross-Origin (CORS) requests must use the same protocol (\".concat(url, \")\"));\n                onError(null, i);\n            }\n        } else {\n            var xhr = new XMLHttpRequest();\n            xhr.open(\"GET\", url);\n            if (settings.mimeType && xhr.overrideMimeType) {\n                xhr.overrideMimeType(settings.mimeType);\n            }\n            settings.onBeforeSend(xhr, url, i);\n            xhr.onreadystatechange = function() {\n                if (xhr.readyState === 4) {\n                    if (xhr.status === 200 && isValidCss(xhr.responseText)) {\n                        onSuccess(xhr.responseText, i);\n                    } else {\n                        onError(xhr, i);\n                    }\n                }\n            };\n            xhr.send();\n        }\n    });\n}\n\n/**\n * Gets CSS data from <style> and <link> nodes (including @imports), then\n * returns data in order processed by DOM. Allows specifying nodes to\n * include/exclude and filtering CSS data using RegEx.\n *\n * @preserve\n * @param {object}   [options] The options object\n * @param {object}   [options.rootElement=document] Root element to traverse for\n *                   <link> and <style> nodes.\n * @param {string}   [options.include] CSS selector matching <link> and <style>\n *                   nodes to include\n * @param {string}   [options.exclude] CSS selector matching <link> and <style>\n *                   nodes to exclude\n * @param {object}   [options.filter] Regular expression used to filter node CSS\n *                   data. Each block of CSS data is tested against the filter,\n *                   and only matching data is included.\n * @param {object}   [options.useCSSOM=false] Determines if CSS data will be\n *                   collected from a stylesheet's runtime values instead of its\n *                   text content. This is required to get accurate CSS data\n *                   when a stylesheet has been modified using the deleteRule()\n *                   or insertRule() methods because these modifications will\n *                   not be reflected in the stylesheet's text content.\n * @param {function} [options.onBeforeSend] Callback before XHR is sent. Passes\n *                   1) the XHR object, 2) source node reference, and 3) the\n *                   source URL as arguments.\n * @param {function} [options.onSuccess] Callback on each CSS node read. Passes\n *                   1) CSS text, 2) source node reference, and 3) the source\n *                   URL as arguments.\n * @param {function} [options.onError] Callback on each error. Passes 1) the XHR\n *                   object for inspection, 2) soure node reference, and 3) the\n *                   source URL that failed (either a <link> href or an @import)\n *                   as arguments\n * @param {function} [options.onComplete] Callback after all nodes have been\n *                   processed. Passes 1) concatenated CSS text, 2) an array of\n *                   CSS text in DOM order, and 3) an array of nodes in DOM\n *                   order as arguments.\n *\n * @example\n *\n *   getCssData({\n *     rootElement: document,\n *     include    : 'style,link[rel=\"stylesheet\"]',\n *     exclude    : '[href=\"skip.css\"]',\n *     filter     : /red/,\n *     useCSSOM   : false,\n *     onBeforeSend(xhr, node, url) {\n *       // ...\n *     }\n *     onSuccess(cssText, node, url) {\n *       // ...\n *     }\n *     onError(xhr, node, url) {\n *       // ...\n *     },\n *     onComplete(cssText, cssArray, nodeArray) {\n *       // ...\n *     }\n *   });\n */ function getCssData(options) {\n    var regex = {\n        cssComments: /\\/\\*[\\s\\S]+?\\*\\//g,\n        cssImports: /(?:@import\\s*)(?:url\\(\\s*)?(?:['\"])([^'\"]*)(?:['\"])(?:\\s*\\))?(?:[^;]*;)/g\n    };\n    var settings = {\n        rootElement: options.rootElement || document,\n        include: options.include || 'style,link[rel=\"stylesheet\"]',\n        exclude: options.exclude || null,\n        filter: options.filter || null,\n        useCSSOM: options.useCSSOM || false,\n        onBeforeSend: options.onBeforeSend || Function.prototype,\n        onSuccess: options.onSuccess || Function.prototype,\n        onError: options.onError || Function.prototype,\n        onComplete: options.onComplete || Function.prototype\n    };\n    var sourceNodes = Array.apply(null, settings.rootElement.querySelectorAll(settings.include)).filter(function(node) {\n        return !matchesSelector(node, settings.exclude);\n    });\n    var cssArray = Array.apply(null, Array(sourceNodes.length)).map(function(x) {\n        return null;\n    });\n    function handleComplete() {\n        var isComplete = cssArray.indexOf(null) === -1;\n        if (isComplete) {\n            var cssText = cssArray.join(\"\");\n            settings.onComplete(cssText, cssArray, sourceNodes);\n        }\n    }\n    function handleSuccess(cssText, cssIndex, node, sourceUrl) {\n        var returnVal = settings.onSuccess(cssText, node, sourceUrl);\n        cssText = returnVal !== undefined && Boolean(returnVal) === false ? \"\" : returnVal || cssText;\n        resolveImports(cssText, node, sourceUrl, function(resolvedCssText, errorData) {\n            if (cssArray[cssIndex] === null) {\n                errorData.forEach(function(data) {\n                    return settings.onError(data.xhr, node, data.url);\n                });\n                if (!settings.filter || settings.filter.test(resolvedCssText)) {\n                    cssArray[cssIndex] = resolvedCssText;\n                } else {\n                    cssArray[cssIndex] = \"\";\n                }\n                handleComplete();\n            }\n        });\n    }\n    function parseImportData(cssText, baseUrl) {\n        var ignoreRules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n        var importData = {};\n        importData.rules = (cssText.replace(regex.cssComments, \"\").match(regex.cssImports) || []).filter(function(rule) {\n            return ignoreRules.indexOf(rule) === -1;\n        });\n        importData.urls = importData.rules.map(function(rule) {\n            return rule.replace(regex.cssImports, \"$1\");\n        });\n        importData.absoluteUrls = importData.urls.map(function(url) {\n            return getFullUrl(url, baseUrl);\n        });\n        importData.absoluteRules = importData.rules.map(function(rule, i) {\n            var oldUrl = importData.urls[i];\n            var newUrl = getFullUrl(importData.absoluteUrls[i], baseUrl);\n            return rule.replace(oldUrl, newUrl);\n        });\n        return importData;\n    }\n    function resolveImports(cssText, node, baseUrl, callbackFn) {\n        var __errorData = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n        var __errorRules = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n        var importData = parseImportData(cssText, baseUrl, __errorRules);\n        if (importData.rules.length) {\n            getUrls(importData.absoluteUrls, {\n                onBeforeSend: function onBeforeSend(xhr, url, urlIndex) {\n                    settings.onBeforeSend(xhr, node, url);\n                },\n                onSuccess: function onSuccess(cssText, url, urlIndex) {\n                    var returnVal = settings.onSuccess(cssText, node, url);\n                    cssText = returnVal === false ? \"\" : returnVal || cssText;\n                    var responseImportData = parseImportData(cssText, url, __errorRules);\n                    responseImportData.rules.forEach(function(rule, i) {\n                        cssText = cssText.replace(rule, responseImportData.absoluteRules[i]);\n                    });\n                    return cssText;\n                },\n                onError: function onError(xhr, url, urlIndex) {\n                    __errorData.push({\n                        xhr: xhr,\n                        url: url\n                    });\n                    __errorRules.push(importData.rules[urlIndex]);\n                    resolveImports(cssText, node, baseUrl, callbackFn, __errorData, __errorRules);\n                },\n                onComplete: function onComplete(responseArray) {\n                    responseArray.forEach(function(importText, i) {\n                        cssText = cssText.replace(importData.rules[i], importText);\n                    });\n                    resolveImports(cssText, node, baseUrl, callbackFn, __errorData, __errorRules);\n                }\n            });\n        } else {\n            callbackFn(cssText, __errorData);\n        }\n    }\n    if (sourceNodes.length) {\n        sourceNodes.forEach(function(node, i) {\n            var linkHref = node.getAttribute(\"href\");\n            var linkRel = node.getAttribute(\"rel\");\n            var isLink = node.nodeName === \"LINK\" && linkHref && linkRel && linkRel.toLowerCase() === \"stylesheet\";\n            var isStyle = node.nodeName === \"STYLE\";\n            if (isLink) {\n                getUrls(linkHref, {\n                    mimeType: \"text/css\",\n                    onBeforeSend: function onBeforeSend(xhr, url, urlIndex) {\n                        settings.onBeforeSend(xhr, node, url);\n                    },\n                    onSuccess: function onSuccess(cssText, url, urlIndex) {\n                        var sourceUrl = getFullUrl(linkHref, location.href);\n                        handleSuccess(cssText, i, node, sourceUrl);\n                    },\n                    onError: function onError(xhr, url, urlIndex) {\n                        cssArray[i] = \"\";\n                        settings.onError(xhr, node, url);\n                        handleComplete();\n                    }\n                });\n            } else if (isStyle) {\n                var cssText = node.textContent;\n                if (settings.useCSSOM) {\n                    cssText = Array.apply(null, node.sheet.cssRules).map(function(rule) {\n                        return rule.cssText;\n                    }).join(\"\");\n                }\n                handleSuccess(cssText, i, node, location.href);\n            } else {\n                cssArray[i] = \"\";\n                handleComplete();\n            }\n        });\n    } else {\n        settings.onComplete(\"\", []);\n    }\n}\n\nfunction getFullUrl(url) {\n    var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : location.href;\n    var d = document.implementation.createHTMLDocument(\"\");\n    var b = d.createElement(\"base\");\n    var a = d.createElement(\"a\");\n    d.head.appendChild(b);\n    d.body.appendChild(a);\n    b.href = base;\n    a.href = url;\n    return a.href;\n}\n\nfunction matchesSelector(elm, selector) {\n    var matches = elm.matches || elm.matchesSelector || elm.webkitMatchesSelector || elm.mozMatchesSelector || elm.msMatchesSelector || elm.oMatchesSelector;\n    return matches.call(elm, selector);\n}\n\nexport default getCssData;\n//# sourceMappingURL=get-css-data.esm.js.map\n","'use strict';\nmodule.exports = balanced;\nfunction balanced(a, b, str) {\n  if (a instanceof RegExp) a = maybeMatch(a, str);\n  if (b instanceof RegExp) b = maybeMatch(b, str);\n\n  var r = range(a, b, str);\n\n  return r && {\n    start: r[0],\n    end: r[1],\n    pre: str.slice(0, r[0]),\n    body: str.slice(r[0] + a.length, r[1]),\n    post: str.slice(r[1] + b.length)\n  };\n}\n\nfunction maybeMatch(reg, str) {\n  var m = str.match(reg);\n  return m ? m[0] : null;\n}\n\nbalanced.range = range;\nfunction range(a, b, str) {\n  var begs, beg, left, right, result;\n  var ai = str.indexOf(a);\n  var bi = str.indexOf(b, ai + 1);\n  var i = ai;\n\n  if (ai >= 0 && bi > 0) {\n    begs = [];\n    left = str.length;\n\n    while (i >= 0 && !result) {\n      if (i == ai) {\n        begs.push(i);\n        ai = str.indexOf(a, i + 1);\n      } else if (begs.length == 1) {\n        result = [ begs.pop(), bi ];\n      } else {\n        beg = begs.pop();\n        if (beg < left) {\n          left = beg;\n          right = bi;\n        }\n\n        bi = str.indexOf(b, i + 1);\n      }\n\n      i = ai < bi && ai >= 0 ? ai : bi;\n    }\n\n    if (begs.length) {\n      result = [ left, right ];\n    }\n  }\n\n  return result;\n}\n","/**\n * Based on css parser/compiler by NxChg\n * https://github.com/NxtChg/pieces/tree/master/js/css_parser\n */\n\n\n// Dependencies\n// =============================================================================\nimport balanced from 'balanced-match';\n\n\n// Functions\n// =============================================================================\n/**\n * Parses CSS string and generates AST object\n *\n * @param {string}  css The CSS stringt to be converted to an AST\n * @param {object}  [options] Options object\n * @param {boolean} [options.preserveStatic=true] Determines if CSS\n *                  declarations that do not reference a custom property will\n *                  be preserved in the transformed CSS\n * @param {boolean} [options.removeComments=false] Remove comments from returned\n *                  object\n * @returns {object}\n */\nfunction parseCss(css, options = {}) {\n    const defaults = {\n        preserveStatic: true,\n        removeComments: false\n    };\n    const settings = Object.assign({}, defaults, options);\n    const errors   = [];\n\n    // Errors\n    // -------------------------------------------------------------------------\n    function error(msg) {\n        throw new Error(`CSS parse error: ${msg}`);\n    }\n\n    // RegEx\n    // -------------------------------------------------------------------------\n    // Match regexp and return captures\n    function match(re) {\n        const m = re.exec(css);\n\n        if (m) {\n            css = css.slice(m[0].length);\n\n            return m;\n        }\n    }\n\n    function open() {\n        return match(/^{\\s*/);\n    }\n\n    function close() {\n        return match(/^}/);\n    }\n\n    function whitespace() {\n        match(/^\\s*/);\n    }\n\n    // Comments\n    // -------------------------------------------------------------------------\n    function comment() {\n        whitespace();\n\n        if (css[0] !== '/' || css[1] !== '*') {\n            return;\n        }\n\n        let i = 2;\n\n        while (css[i] && (css[i] !== '*' || css[i + 1] !== '/')) {\n            i++;\n        }\n\n        if (!css[i]) {\n            return error('end of comment is missing');\n        }\n\n        const str = css.slice(2, i);\n\n        css = css.slice(i + 2);\n\n        return {\n            type   : 'comment',\n            comment: str\n        };\n    }\n\n    function comments() {\n        const cmnts = [];\n        let c;\n\n        while ((c = comment())) {\n            cmnts.push(c);\n        }\n\n        return settings.removeComments ? [] : cmnts;\n    }\n\n    // Selector\n    // -------------------------------------------------------------------------\n    function selector() {\n        whitespace();\n\n        while (css[0] === '}') {\n            error('extra closing bracket');\n        }\n\n        const m = match(/^((\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'|[^{])+)/);\n\n        if (m) {\n            return m[0]\n                .trim() // remove all comments from selectors\n                .replace(/\\/\\*([^*]|[\\r\\n]|(\\*+([^*/]|[\\r\\n])))*\\*\\/+/g, '')\n                .replace(/\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'/g, function(m) {\n                    return m.replace(/,/g, '\\u200C');\n                })\n                .split(/\\s*(?![^(]*\\)),\\s*/)\n                .map(function(s) {\n                    return s.replace(/\\u200C/g, ',');\n                });\n        }\n    }\n\n    // Declarations\n    // -------------------------------------------------------------------------\n    function declaration() {\n        match(/^([;\\s]*)+/); // ignore empty declarations + whitespace\n\n        const comment_regexp = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n        let prop = match(/^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/);\n\n        if (!prop) {\n            return;\n        }\n\n        prop = prop[0].trim();\n\n        if (!match(/^:\\s*/)) {\n            return error('property missing \\':\\'');\n        }\n\n        // Quotes regex repeats verbatim inside and outside parentheses\n        const val = match(/^((?:\\/\\*.*?\\*\\/|'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\((\\s*'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|[^)]*?)\\s*\\)|[^};])+)/);\n        const ret = {\n            type    : 'declaration',\n            property: prop.replace(comment_regexp, ''),\n            value   : val ? val[0].replace(comment_regexp, '').trim() : ''\n        };\n\n        match(/^[;\\s]*/);\n\n        return ret;\n    }\n\n    function declarations() {\n        if (!open()) {\n            return error('missing \\'{\\'');\n        }\n\n        let d;\n        let decls = comments();\n\n        while ((d = declaration())) {\n            decls.push(d);\n            decls = decls.concat(comments());\n        }\n\n        if (!close()) {\n            return error('missing \\'}\\'');\n        }\n\n        return decls;\n    }\n\n    // Keyframes\n    // -------------------------------------------------------------------------\n    function keyframe() {\n        whitespace();\n\n        const vals = [];\n        let m;\n\n        while ((m = match(/^((\\d+\\.\\d+|\\.\\d+|\\d+)%?|[a-z]+)\\s*/))) {\n            vals.push(m[1]);\n            match(/^,\\s*/);\n        }\n\n        if (vals.length) {\n            return {\n                type        : 'keyframe',\n                values      : vals,\n                declarations: declarations()\n            };\n        }\n    }\n\n    function at_keyframes() {\n        let m = match(/^@([-\\w]+)?keyframes\\s*/);\n\n        if (!m) {\n            return;\n        }\n\n        const vendor = m[1];\n\n        m = match(/^([-\\w]+)\\s*/);\n\n        if (!m) {\n            return error('@keyframes missing name');\n        }\n\n        const name = m[1];\n\n        if (!open()) {\n            return error('@keyframes missing \\'{\\'');\n        }\n\n        let frame;\n        let frames = comments();\n\n        while ((frame = keyframe())) {\n            frames.push(frame);\n            frames = frames.concat(comments());\n        }\n\n        if (!close()) {\n            return error('@keyframes missing \\'}\\'');\n        }\n\n        return {\n            type     : 'keyframes',\n            name     : name,\n            vendor   : vendor,\n            keyframes: frames\n        };\n    }\n\n    // @ Rules\n    // -------------------------------------------------------------------------\n    function at_page() {\n        const m = match(/^@page */);\n        if (m) {\n            const sel = selector() || [];\n            return { type: 'page', selectors: sel, declarations: declarations() };\n        }\n    }\n    function at_fontface() {\n        const m = match(/^@font-face\\s*/);\n        if (m) { return { type: 'font-face', declarations: declarations() }; }\n    }\n    function at_supports() {\n        const m = match(/^@supports *([^{]+)/);\n        if (m) { return { type: 'supports', supports: m[1].trim(), rules: rules() }; }\n    }\n    function at_host() {\n        const m = match(/^@host\\s*/);\n        if (m) { return { type: 'host', rules: rules() }; }\n    }\n    function at_media() {\n        const m = match(/^@media([^{]+)*/);\n        if (m) { return { type: 'media', media: (m[1] || '').trim(), rules: rules() }; }\n    }\n    function at_custom_m() {\n        const m = match(/^@custom-media\\s+(--[^\\s]+)\\s*([^{;]+);/);\n        if (m) { return { type: 'custom-media', name: m[1].trim(), media: m[2].trim() }; }\n    }\n    function at_document() {\n        const m = match(/^@([-\\w]+)?document *([^{]+)/);\n        if (m) { return { type: 'document', document: m[2].trim(), vendor: m[1] ? m[1].trim() : null, rules: rules() }; }\n    }\n    function at_x() {\n        const m = match(/^@(import|charset|namespace)\\s*([^;]+);/);\n        if (m) { return { type: m[1], name: m[2].trim() }; }\n    }\n    function at_rule() {\n        whitespace();\n\n        if (css[0] === '@') {\n            const ret = at_keyframes() || at_supports() || at_host() || at_media() || at_custom_m() || at_page() || at_document() || at_fontface() || at_x();\n\n            if (ret && !settings.preserveStatic) {\n                let hasVarFunc = false;\n\n                // @page, @font-face\n                if (ret.declarations) {\n                    hasVarFunc = ret.declarations.some(decl => /var\\(/.test(decl.value));\n                }\n                // @keyframes, @media, @supports, etc.\n                else {\n                    const arr = ret.keyframes || ret.rules || [];\n\n                    hasVarFunc = arr.some(obj => (obj.declarations || []).some(decl => /var\\(/.test(decl.value)));\n                }\n\n                return hasVarFunc ? ret : {};\n            }\n\n            return ret;\n        }\n    }\n\n    // Rules\n    // -------------------------------------------------------------------------\n    function rule() {\n        if (!settings.preserveStatic) {\n            const balancedMatch = balanced('{', '}', css);\n\n            // Skip rulset if it does not contain a root/host variable\n            // declaration or a variable function value\n            if (balancedMatch) {\n                const hasVarDecl = /:(?:root|host)(?![.:#(])/.test(balancedMatch.pre) && /--\\S*\\s*:/.test(balancedMatch.body);\n                const hasVarFunc = /var\\(/.test(balancedMatch.body);\n\n                if (!hasVarDecl && !hasVarFunc) {\n                    css = css.slice(balancedMatch.end + 1);\n\n                    return {};\n                }\n            }\n        }\n\n        const sel   = selector() || [];\n        const decls = settings.preserveStatic ? declarations() : declarations().filter(decl => {\n            const hasVarDecl = sel.some(s => /:(?:root|host)(?![.:#(])/.test(s)) && /^--\\S/.test(decl.property);\n            const hasVarFunc = /var\\(/.test(decl.value);\n\n            return hasVarDecl || hasVarFunc;\n        });\n\n        if (!sel.length) {\n            error('selector missing');\n        }\n\n        return {\n            type        : 'rule',\n            selectors   : sel,\n            declarations: decls\n        };\n    }\n\n    function rules(core) {\n        if (!core && !open()) {\n            return error('missing \\'{\\'');\n        }\n\n        let node;\n        let rules = comments();\n\n        while (css.length && (core || css[0] !== '}') && (node = at_rule() || rule())) {\n            if (node.type) {\n                rules.push(node);\n            }\n\n            rules = rules.concat(comments());\n        }\n\n        if (!core && !close()) {\n            return error('missing \\'}\\'');\n        }\n\n        return rules;\n    }\n\n    return {\n        type: 'stylesheet',\n        stylesheet: {\n            rules: rules(true),\n            errors: errors\n        }\n    };\n}\n\n\n// Exports\n// =============================================================================\nexport default parseCss;\n","// Dependencies\n// =============================================================================\nimport parseCss from './parse-css';\n\n\n// Functions\n// =============================================================================\n/**\n * Description\n *\n * @param {object|string} cssData CSS data to parse\n * @param {object} [options] Options object\n * @param {object} [options.store={}] CSS variable definitions to include during\n *     transformation. Can be used to add new override exisitng definitions.\n * @param {function} [options.onWarning] Callback on each transformation\n *     warning. Passes 1) warningMessage as an argument.\n * @returns {object}\n */\nfunction parseVars(cssData, options = {}) {\n    const defaults = {\n        parseHost: false,\n        store    : {},\n        onWarning() {}\n    };\n    const settings           = Object.assign({}, defaults, options);\n    const reVarDeclSelectors = new RegExp(`:${ settings.parseHost ? 'host' : 'root' }(?![.:#(])`);\n\n    // Convert CSS string to AST\n    if (typeof cssData === 'string') {\n        cssData = parseCss(cssData, settings);\n    }\n\n    // Define variables\n    cssData.stylesheet.rules.forEach(function(rule) {\n        const varNameIndices = [];\n\n        if (rule.type !== 'rule' || !rule.selectors.some(s => reVarDeclSelectors.test(s))) {\n            return;\n        }\n\n        rule.declarations.forEach(function(decl, i) {\n            const prop  = decl.property;\n            const value = decl.value;\n\n            if (prop && prop.indexOf('--') === 0) {\n                settings.store[prop] = value;\n                varNameIndices.push(i);\n            }\n        });\n    });\n\n    // Return variable store\n    return settings.store;\n}\n\n\n// Exports\n// =============================================================================\nexport default parseVars;\n","/**\n * Based on css parser/compiler by NxChg\n * https://github.com/NxtChg/pieces/tree/master/js/css_parser\n */\n\n\n// Functions\n// =============================================================================\n/**\n * Compiles CSS AST to string\n *\n * @param {object}   tree CSS AST object\n * @param {string}   [delim=''] CSS rule delimiter\n * @param {function} cb Function to be called before each node is processed\n * @returns {string}\n */\nfunction stringifyCss(tree, delim = '', cb) {\n    const renderMethods = {\n        charset(node) {\n            return '@charset ' + node.name + ';';\n        },\n        comment(node) {\n            // Preserve ponyfill marker comments\n            return node.comment.indexOf('__CSSVARSPONYFILL') === 0 ? '/*' + node.comment + '*/' : '';\n        },\n        'custom-media'(node) {\n            return '@custom-media ' + node.name + ' ' + node.media + ';';\n        },\n        declaration(node) {\n            return node.property + ':' + node.value + ';';\n        },\n        document(node) {\n            return '@' + (node.vendor || '') + 'document ' + node.document + '{' + visit(node.rules) + '}';\n        },\n        'font-face'(node) {\n            return '@font-face' + '{' + visit(node.declarations) + '}';\n        },\n        host(node) {\n            return '@host' + '{' + visit(node.rules) + '}';\n        },\n        import(node) {\n            // FIXED\n            return '@import ' + node.name + ';';\n        },\n        keyframe(node) {\n            return node.values.join(',') + '{' + visit(node.declarations) + '}';\n        },\n        keyframes(node) {\n            return '@' + (node.vendor || '') + 'keyframes ' + node.name + '{' + visit(node.keyframes) + '}';\n        },\n        media(node) {\n            return '@media ' + node.media + '{' + visit(node.rules) + '}';\n        },\n        namespace(node) {\n            return '@namespace ' + node.name + ';';\n        },\n        page(node) {\n            return '@page ' + (node.selectors.length ? node.selectors.join(', ') : '') + '{' + visit(node.declarations) + '}';\n        },\n        rule(node) {\n            const decls = node.declarations;\n\n            if (decls.length) {\n                return node.selectors.join(',') + '{' + visit(decls) + '}';\n            }\n        },\n        supports(node) {\n            // FIXED\n            return '@supports ' + node.supports + '{' + visit(node.rules) + '}';\n        }\n    };\n\n    function visit(nodes) {\n        let buf = '';\n\n        for (let i = 0; i < nodes.length; i++) {\n            const n = nodes[i];\n\n            if (cb) {\n                cb(n);\n            }\n\n            const txt = renderMethods[n.type](n);\n\n            if (txt) {\n                buf += txt;\n\n                if (txt.length && n.selectors) {\n                    buf += delim;\n                }\n            }\n        }\n\n        return buf;\n    }\n\n    return visit(tree.stylesheet.rules);\n}\n\n\n// Exports\n// =============================================================================\nexport default stringifyCss;\n","/**\n * Based on rework-vars by reworkcss\n * https://github.com/reworkcss/rework-vars\n */\n\n\n// Dependencies\n// =============================================================================\nimport balanced     from 'balanced-match';\nimport parseCss     from './parse-css';\nimport stringifyCss from './stringify-css';\nimport walkCss      from './walk-css';\n\n\n// Constants & Variables\n// =============================================================================\nconst VAR_PROP_IDENTIFIER = '--';\nconst VAR_FUNC_IDENTIFIER = 'var';\n\n\n// Functions\n// =============================================================================\n/**\n * Transforms W3C-style CSS variables to static values and returns an updated\n * CSS string.\n *\n * @param {object}   cssData CSS text or AST\n * @param {object}   [options] Options object\n * @param {boolean}  [options.preserveStatic=true] Determines if CSS\n *                   declarations that do not reference a custom property will\n *                   be preserved in the transformed CSS\n * @param {boolean}  [options.preserveVars=false] Determines if CSS custom\n *                   property declarations will be preserved in the transformed\n *                   CSS\n * @param {object}   [options.variables={}] CSS variable definitions to include\n *                   during transformation. Can be used to add new override\n *                   exisitng definitions.\n * @param {function} [options.onWarning] Callback on each transformation\n *                   warning. Passes 1) warningMessage as an argument.\n * @returns {string}\n */\nfunction transformCss(cssData, options = {}) {\n    const defaults = {\n        preserveStatic: true,\n        preserveVars  : false,\n        variables     : {},\n        onWarning() {}\n    };\n    const settings = Object.assign({}, defaults, options);\n\n    // Convert CSS string to AST\n    if (typeof cssData === 'string') {\n        cssData = parseCss(cssData, settings);\n    }\n\n    // Resolve variables\n    walkCss(cssData.stylesheet, function(declarations, node) {\n        for (let i = 0; i < declarations.length; i++) {\n            const decl  = declarations[i];\n            const type  = decl.type;\n            const prop  = decl.property;\n            const value = decl.value;\n\n            // Skip comments\n            if (type !== 'declaration') {\n                continue;\n            }\n\n            // Remove custom property declarations\n            if (!settings.preserveVars && prop && prop.indexOf(VAR_PROP_IDENTIFIER) === 0) {\n                declarations.splice(i, 1);\n                i--;\n                continue;\n            }\n\n            // Transform custom property functions\n            if (value.indexOf(VAR_FUNC_IDENTIFIER + '(') !== -1) {\n                let resolvedValue = resolveValue(value, settings);\n\n                if (resolvedValue !== decl.value) {\n                    // Fix nested calc\n                    resolvedValue = fixNestedCalc(resolvedValue);\n\n                    // Overwrite value\n                    if (!settings.preserveVars) {\n                        decl.value = resolvedValue;\n                    }\n                    // Insert new rule with resolved value\n                    else {\n                        declarations.splice(i, 0, {\n                            type    : type,\n                            property: prop,\n                            value   : resolvedValue\n                        });\n\n                        // Skip ahead of preserved declaration\n                        i++;\n                    }\n                }\n            }\n        }\n    });\n\n    // Return CSS string\n    return stringifyCss(cssData);\n}\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Removes nested calc keywords for legacy browser compatibility.\n * Example: calc(1 + calc(2 + calc(3 + 3))) => calc(1 + (2 + (3 + 3)))\n *\n * @param {value} string\n */\nfunction fixNestedCalc(value) {\n    const reCalcVal = /calc\\(([^)]+)\\)/g;\n\n    (value.match(reCalcVal) || []).forEach(match => {\n        const newVal = `calc${match.split('calc').join('')}`;\n        value = value.replace(match, newVal);\n    });\n\n    return value;\n}\n\n/**\n * Resolves CSS var() function(s) with `settings.variables` or fallback\n * value(s). Returns original `value` if unable to resolve.\n *\n * @param {string} value String containing CSS var() functions to resolve\n * @param {object} settings Settings object passed from transformCss()\n * @param {string} [__recursiveFallback] Fallback when unable to resolve CSS\n *                 var() function to a `settings.variables` or fallback value.\n *                 Allows restoring original var() function from recursive\n *                 resolveValue() calls.\n * @return {string} CSS value with var() function(s) resolved to\n *                  `settings.variables` or fallback value.\n *\n * @example\n *\n *   resolveValue('10px var(--x) 30px', {'--x':'20px'}, {...settings});\n *   // => '10px 20px 30px'\n *\n *   resolveValue('10px', {}, {...settings});\n *   // => '10px'\n */\nfunction resolveValue(value, settings = {}, __recursiveFallback) {\n    if (value.indexOf('var(') === -1) {\n        return value;\n    }\n\n    const valueData = balanced('(', ')', value);\n\n    /**\n     * Resolves contents of CSS custom property function\n     *\n     * @param {string} value String containing contents of CSS var() function\n     * @returns {string}\n     *\n     * @example\n     *\n     *   resolveFunc('--x, var(--y, green)')\n     *   // => obj['--x'] or obj['--y'] or 'green'\n     *\n     *   resolveFunc('--fail')\n     *   // => 'var(--fail)' when obj['--fail'] does not exist\n     */\n    function resolveFunc(value) {\n        const name               = value.split(',')[0].replace(/[\\s\\n\\t]/g, '');\n        const fallback           = (value.match(/(?:\\s*,\\s*){1}(.*)?/) || [])[1];\n        const match              = Object.prototype.hasOwnProperty.call(settings.variables, name) ? String(settings.variables[name]) : undefined;\n        const replacement        = match || (fallback ? String(fallback) : undefined);\n        const unresolvedFallback = __recursiveFallback || value;\n\n        if (!match) {\n            settings.onWarning(`variable \"${name}\" is undefined`);\n        }\n\n        if (replacement && replacement !== 'undefined' && replacement.length > 0) {\n            return resolveValue(replacement, settings, unresolvedFallback);\n        }\n        else {\n            return `var(${unresolvedFallback})`;\n        }\n    }\n\n    // No balanced brace data\n    if (!valueData) {\n        if (value.indexOf('var(') !== -1) {\n            settings.onWarning(`missing closing \")\" in the value \"${value}\"`);\n        }\n\n        return value;\n    }\n    // Balanced brace data is var() function\n    else if (valueData.pre.slice(-3) === 'var') {\n        const isEmptyVarFunc = valueData.body.trim().length === 0;\n\n        if (isEmptyVarFunc) {\n            settings.onWarning('var() must contain a non-whitespace string');\n\n            return value;\n        }\n        else {\n            return (\n                valueData.pre.slice(0,-3)\n                + resolveFunc(valueData.body)\n                + resolveValue(valueData.post, settings)\n            );\n        }\n    }\n    // Balanced brace data is NOT var() function\n    else {\n        return (\n            valueData.pre\n            + `(${resolveValue(valueData.body, settings)})`\n            + resolveValue(valueData.post, settings)\n        );\n    }\n}\n\n\n// Exports\n// =============================================================================\nexport default transformCss;\n","/**\n * Based on rework-visit by reworkcss\n * https://github.com/reworkcss/rework-visit\n */\n\n\n// Functions\n// =============================================================================\n/**\n * Visit `node` declarations recursively and invoke `fn(declarations, node)`.\n *\n * @param {object} node\n * @param {function} fn\n */\nfunction walkCss(node, fn){\n    node.rules.forEach(function(rule){\n        // @media etc\n        if (rule.rules) {\n            walkCss(rule, fn);\n\n            return;\n        }\n\n        // keyframes\n        if (rule.keyframes) {\n            rule.keyframes.forEach(function(keyframe){\n                if (keyframe.type === 'keyframe') {\n                    fn(keyframe.declarations, rule);\n                }\n            });\n\n            return;\n        }\n\n        // @charset, @import etc\n        if (!rule.declarations) {\n            return;\n        }\n\n        fn(rule.declarations, node);\n    });\n}\n\n\n// Exports\n// =============================================================================\nexport default walkCss;\n","// Dependencies\n// =============================================================================\nimport getCssData   from 'get-css-data';\nimport parseCss     from './parse-css';\nimport parseVars    from './parse-vars';\nimport stringifyCss from './stringify-css';\nimport transformCss from './transform-css';\n\n\n// Constants & Variables\n// =============================================================================\nconst isBrowser       = typeof window !== 'undefined';\nconst isNativeSupport = isBrowser && window.CSS && window.CSS.supports && window.CSS.supports('(--a: 0)');\n\nconst counters = {\n    group: 0,\n    job  : 0\n};\nconst defaults = {\n    // Targets\n    rootElement   : isBrowser ? document : null,\n    shadowDOM     : false,\n    // Sources\n    include       : 'style,link[rel=stylesheet]',\n    exclude       : '',\n    variables     : {},    // cssVars, transformCss\n    // Options\n    onlyLegacy    : true,  // cssVars\n    preserveStatic: true,  // parseCSS\n    preserveVars  : false, // transformCss\n    silent        : false, // cssVars\n    updateDOM     : true,  // cssVars\n    updateURLs    : true,  // cssVars\n    watch         : null,  // cssVars\n    // Callbacks\n    onBeforeSend() {},     // cssVars\n    onWarning() {},        // transformCss\n    onError() {},          // cssVars\n    onSuccess() {},        // cssVars\n    onComplete() {}        // cssVars\n};\nconst regex = {\n    // CSS comments\n    cssComments: /\\/\\*[\\s\\S]+?\\*\\//g,\n    // CSS keyframes\n    // Ex: @keyframes & @-VENDOR-keyframes\n    cssKeyframes: /@(?:-\\w*-)?keyframes/,\n    // CSS media queries\n    // Ex: @media (min-width: 640px) { ... }\n    cssMediaQueries: /@media[^{]+\\{([\\s\\S]+?})\\s*}/g,\n    // CSS Urls\n    // Ex: url('path/to/file')\n    cssUrls: /url\\((?!['\"]?(?:data|http|\\/\\/):)['\"]?([^'\")]*)['\"]?\\)/g,\n    // CSS root/host rules\n    // Ex: :root { ... } or :host { ... }\n    cssVarDeclRules: /(?::(?:root|host)(?![.:#(])[\\s,]*[^{]*{\\s*[^}]*})/g,\n    // CSS variable declarations (e.g. --color: red;)\n    cssVarDecls: /(?:[\\s;]*)(-{2}\\w[\\w-]*)(?:\\s*:\\s*)([^;]*);/g,\n    // CSS variable function (e.g. var(--color))\n    cssVarFunc: /var\\(\\s*--[\\w-]/,\n    // CSS variable root/host declarations and var() function values\n    cssVars: /(?:(?::(?:root|host)(?![.:#(])[\\s,]*[^{]*{\\s*[^;]*;*\\s*)|(?:var\\(\\s*))(--[^:)]+)(?:\\s*[:)])/\n};\nconst variableStore = {\n    // Persisted values (emulates modern browser behavior)\n    dom : {},\n    // Temporary non-persisted values (i.e. options.updateDOM = false)\n    job : {},\n    // Persisted options.variables data\n    user: {}\n};\n\n// Flag used to prevent successive ponyfill calls from stacking\nlet cssVarsIsRunning = false;\n\n// Mutation observer reference created via options.watch\nlet cssVarsObserver = null;\n\n// Count used to detect manual removal of [data-cssvars=\"src\"] nodes\nlet cssVarsSrcNodeCount = 0;\n\n// Debounce timer used with options.watch\nlet debounceTimer = null;\n\n// Flag used to indicate if document-level custom property values have been\n// parsed, stored, and ready for use with options.shadowDOM\nlet isShadowDOMReady = false;\n\n\n// Functions\n// =============================================================================\n/**\n * Fetches, parses, and transforms CSS custom properties from specified\n * <style> and <link> elements into static values, then appends a new <style>\n * element with static values to the DOM to provide CSS custom property\n * compatibility for legacy browsers. Also provides a single interface for\n * live updates of runtime values in both modern and legacy browsers.\n *\n * @preserve\n * @param {object}   [options] Options object\n * @param {object}   [options.rootElement=document] Root element to traverse for\n *                   <link> and <style> nodes\n * @param {boolean}  [options.shadowDOM=false] Determines if shadow DOM <link>\n *                   and <style> nodes will be processed.\n * @param {string}   [options.include=\"style,link[rel=stylesheet]\"] CSS selector\n *                   matching <link re=\"stylesheet\"> and <style> nodes to\n *                   process\n * @param {string}   [options.exclude] CSS selector matching <link\n *                   rel=\"stylehseet\"> and <style> nodes to exclude from those\n *                   matches by options.include\n * @param {object}   [options.variables] A map of custom property name/value\n *                   pairs. Property names can omit or include the leading\n *                   double-hyphen (—), and values specified will override\n *                   previous values\n * @param {boolean}  [options.onlyLegacy=true] Determines if the ponyfill will\n *                   only generate legacy-compatible CSS in browsers that lack\n *                   native support (i.e., legacy browsers)\n * @param {boolean}  [options.preserveStatic=true] Determines if CSS\n *                   declarations that do not reference a custom property will\n *                   be preserved in the transformed CSS\n * @param {boolean}  [options.preserveVars=false] Determines if CSS custom\n *                   property declarations will be preserved in the transformed\n *                   CSS\n * @param {boolean}  [options.silent=false] Determines if warning and error\n *                   messages will be displayed on the console\n * @param {boolean}  [options.updateDOM=true] Determines if the ponyfill will\n *                   update the DOM after processing CSS custom properties\n * @param {boolean}  [options.updateURLs=true] Determines if the ponyfill will\n *                   convert relative url() paths to absolute urls\n * @param {boolean}  [options.watch=false] Determines if a MutationObserver will\n *                   be created that will execute the ponyfill when a <link> or\n *                   <style> DOM mutation is observed\n * @param {function} [options.onBeforeSend] Callback before XHR is sent. Passes\n *                   1) the XHR object, 2) source node reference, and 3) the\n *                   source URL as arguments\n * @param {function} [options.onWarning] Callback after each CSS parsing warning\n *                   has occurred. Passes 1) a warning message as an argument.\n * @param {function} [options.onError] Callback after a CSS parsing error has\n *                   occurred or an XHR request has failed. Passes 1) an error\n *                   message, and 2) source node reference, 3) xhr, and 4 url as\n *                   arguments.\n * @param {function} [options.onSuccess] Callback after CSS data has been\n *                   collected from each node and before CSS custom properties\n *                   have been transformed. Allows modifying the CSS data before\n *                   it is transformed by returning any string value (or false\n *                   to skip). Passes 1) CSS text, 2) source node reference, and\n *                   3) the source URL as arguments.\n * @param {function} [options.onComplete] Callback after all CSS has been\n *                   processed, legacy-compatible CSS has been generated, and\n *                   (optionally) the DOM has been updated. Passes 1) a CSS\n *                   string with CSS variable values resolved, 2) an array of\n *                   output <style> node references that have been appended to\n *                   the DOM, 3) an object containing all custom properies names\n *                   and values, and 4) the ponyfill execution time in\n *                   milliseconds.\n *\n * @example\n *\n *   cssVars({\n *     rootElement   : document,\n *     shadowDOM     : false,\n *     include       : 'style,link[rel=\"stylesheet\"]',\n *     exclude       : '',\n *     variables     : {},\n *     onlyLegacy    : true,\n *     preserveStatic: true,\n *     preserveVars  : false,\n *     silent        : false,\n *     updateDOM     : true,\n *     updateURLs    : true,\n *     watch         : false,\n *     onBeforeSend(xhr, node, url) {},\n *     onWarning(message) {},\n *     onError(message, node, xhr, url) {},\n *     onSuccess(cssText, node, url) {},\n *     onComplete(cssText, styleNode, cssVariables, benchmark) {}\n *   });\n */\nfunction cssVars(options = {}) {\n    const msgPrefix = 'cssVars(): ';\n    const settings  = Object.assign({}, defaults, options);\n\n    function handleError(message, sourceNode, xhr, url) {\n        /* istanbul ignore next */\n        if (!settings.silent && window.console) {\n            // eslint-disable-next-line\n            console.error(`${msgPrefix}${message}\\n`, sourceNode);\n        }\n\n        settings.onError(message, sourceNode, xhr, url);\n    }\n\n    function handleWarning(message) {\n        /* istanbul ignore next */\n        if (!settings.silent && window.console) {\n            // eslint-disable-next-line\n            console.warn(`${msgPrefix}${message}`);\n        }\n\n        settings.onWarning(message);\n    }\n\n    // Exit if non-browser environment (e.g. Node)\n    if (!isBrowser) {\n        return;\n    }\n\n    // Add / recreate MutationObserver\n    if (settings.watch) {\n        settings.watch = defaults.watch;\n        addMutationObserver(settings);\n        cssVars(settings);\n        return;\n    }\n    // Disconnect existing MutationObserver\n    else if (settings.watch === false && cssVarsObserver) {\n        cssVarsObserver.disconnect();\n        cssVarsObserver = null;\n    }\n\n    // If benchmark key is not availalbe, this is a non-recursive call\n    if (!settings.__benchmark) {\n        // Check flag and debounce to prevent successive call from stacking\n        if (cssVarsIsRunning === settings.rootElement) {\n            cssVarsDebounced(options);\n            return;\n        }\n\n        // Store benchmark start time\n        settings.__benchmark = getTimeStamp();\n\n        // Exclude previously processed elements\n        settings.exclude = [\n            // 1. When the ponyfill is called by the MutationObserver, all\n            //    previously processed nodes are exluded except those that have\n            //    had their out/skip/src values cleared by the MutationObserver.\n            // 2. When the ponyfill is called directly, only output nodes are\n            //    excluded. This allows the ponyfill to update skip/src nodes\n            //    after a previously processed link/style node has been removed.\n            cssVarsObserver ? '[data-cssvars]:not([data-cssvars=\"\"])' : '[data-cssvars=\"out\"]',\n            settings.exclude\n        ].filter(selector => selector).join(',');\n\n        // Fix malformed custom property names (e.g. \"color\" or \"-color\")\n        settings.variables = fixVarNames(settings.variables);\n\n        // Direct call preparation (i.e. non-MutationObserver call)\n        if (!cssVarsObserver) {\n            const outNodes = Array.apply(null, settings.rootElement.querySelectorAll('[data-cssvars=\"out\"]'));\n\n            // Remove orphaned output nodes\n            outNodes.forEach(outNode => {\n                const dataGroup = outNode.getAttribute('data-cssvars-group');\n                const srcNode   = dataGroup ? settings.rootElement.querySelector(`[data-cssvars=\"src\"][data-cssvars-group=\"${dataGroup}\"]`) : null;\n\n                if (!srcNode) {\n                    outNode.parentNode.removeChild(outNode);\n                }\n            });\n\n            // Handle removed source nodes\n            if (cssVarsSrcNodeCount) {\n                const srcNodes = settings.rootElement.querySelectorAll('[data-cssvars]:not([data-cssvars=\"out\"])');\n\n                if (srcNodes.length < cssVarsSrcNodeCount) {\n                    // Update source node count\n                    cssVarsSrcNodeCount = srcNodes.length;\n\n                    // Reset variableStore\n                    variableStore.dom = {};\n                }\n            }\n        }\n    }\n\n    // Verify readyState to ensure all <link> and <style> nodes are available\n    if (document.readyState !== 'loading') {\n        // Native support\n        if (isNativeSupport && settings.onlyLegacy) {\n            // Apply settings.variables\n            if (settings.updateDOM) {\n                const targetElm = settings.rootElement.host || (settings.rootElement === document ? document.documentElement : settings.rootElement);\n\n                // Set variables using native methods\n                Object.keys(settings.variables).forEach(key => {\n                    targetElm.style.setProperty(key, settings.variables[key]);\n                });\n            }\n        }\n        // Ponyfill: Handle rootElement set to a shadow host or root\n        else if (!isShadowDOMReady && (settings.shadowDOM || settings.rootElement.shadowRoot || settings.rootElement.host)) {\n            // Get all document-level CSS\n            getCssData({\n                rootElement: defaults.rootElement,\n                include: defaults.include,\n                exclude: settings.exclude,\n                onSuccess(cssText, node, url) {\n                    cssText = cssText\n                        .replace(regex.cssComments, '')\n                        .replace(regex.cssMediaQueries, '');\n\n                    cssText = (cssText.match(regex.cssVarDeclRules) || []).join('');\n\n                    // Return only matching :root {...} blocks\n                    return cssText || false;\n                },\n                onComplete(cssText, cssArray, nodeArray) {\n                    // Parse variables and store in variableStore. This step\n                    // ensures that variableStore contains all document-level\n                    // custom property values for subsequent ponyfill calls.\n                    parseVars(cssText, {\n                        store    : variableStore.dom,\n                        onWarning: handleWarning\n                    });\n\n                    isShadowDOMReady = true;\n\n                    // Call the ponyfill again to process the rootElement\n                    // initially specified. Values stored in variableStore will\n                    // be used to transform values in shadow host/root elements.\n                    cssVars(settings);\n                }\n            });\n        }\n        // Ponyfill: Process CSS\n        else {\n            // Set flag to prevent successive call from stacking. Using the\n            // rootElement insead of `true` allows simultaneous ponyfill calls\n            // using different rootElement values (e.g. documetn and one-or-more\n            // shadowDOM nodes).\n            cssVarsIsRunning = settings.rootElement;\n\n            getCssData({\n                rootElement : settings.rootElement,\n                include     : settings.include,\n                exclude     : settings.exclude,\n                onBeforeSend: settings.onBeforeSend,\n                onError(xhr, node, url) {\n                    const responseUrl = xhr.responseURL || getFullUrl(url, location.href);\n                    const statusText  = xhr.statusText ? `(${xhr.statusText})` : 'Unspecified Error' + (xhr.status === 0 ? ' (possibly CORS related)' : '');\n                    const errorMsg    = `CSS XHR Error: ${responseUrl} ${xhr.status} ${statusText}`;\n\n                    handleError(errorMsg, node, xhr, responseUrl);\n                },\n                onSuccess(cssText, node, url) {\n                    const returnVal = settings.onSuccess(cssText, node, url);\n\n                    // Use callback return value if provided (skip CSS if false)\n                    cssText = returnVal !== undefined && Boolean(returnVal) === false ? '' : returnVal || cssText;\n\n                    // Convert relative url(...) values to absolute\n                    if (settings.updateURLs) {\n                        cssText = fixRelativeCssUrls(cssText, url);\n                    }\n\n                    return cssText;\n                },\n                onComplete(cssText, cssArray, nodeArray = []) {\n                    const jobVars  = {};\n                    const varStore = settings.updateDOM ? variableStore.dom : Object.keys(variableStore.job).length ? variableStore.job : variableStore.job = JSON.parse(JSON.stringify(variableStore.dom));\n\n                    let hasVarChange = false;\n\n                    // Parse CSS and variables\n                    nodeArray.forEach((node, i) => {\n                        // Only process CSS contains a custom property\n                        // declarations or function\n                        if (regex.cssVars.test(cssArray[i])) {\n                            try {\n                                const cssTree = parseCss(cssArray[i], {\n                                    preserveStatic: settings.preserveStatic,\n                                    removeComments: true\n                                });\n\n                                // Parse variables\n                                parseVars(cssTree, {\n                                    parseHost: Boolean(settings.rootElement.host),\n                                    store    : jobVars,\n                                    onWarning: handleWarning\n                                });\n\n                                // Cache data\n                                node.__cssVars = { tree: cssTree };\n                            }\n                            catch(err) {\n                                handleError(err.message, node);\n                            }\n                        }\n                    });\n\n                    if (settings.updateDOM) {\n                        Object.assign(variableStore.user, settings.variables);\n                    }\n\n                    // Merge settings.variables into jobVars\n                    Object.assign(jobVars, settings.variables);\n\n                    // Detect new variable declaration or value\n                    hasVarChange = Boolean(\n                        // Ponfill has been called previously\n                        (document.querySelector('[data-cssvars]') || Object.keys(variableStore.dom).length) &&\n                        // Variable declaration or value change detected\n                        Object.keys(jobVars).some(name => jobVars[name] !== varStore[name])\n                    );\n\n                    // Merge jobVars into variable storage\n                    Object.assign(varStore, variableStore.user, jobVars);\n\n                    // New variable declaration or modified value detected\n                    if (hasVarChange) {\n                        resetCssNodes(settings.rootElement);\n                        cssVars(settings);\n                    }\n                    // No variable changes detected\n                    else {\n                        const outCssArray  = [];\n                        const outNodeArray = [];\n\n                        let hasKeyframesWithVars = false;\n\n                        // Reset temporary variable store\n                        variableStore.job = {};\n\n                        // Increment job\n                        if (settings.updateDOM) {\n                            counters.job++;\n                        }\n\n                        nodeArray.forEach(node => {\n                            let isSkip = !node.__cssVars;\n\n                            if (node.__cssVars) {\n                                try {\n                                    transformCss(node.__cssVars.tree, Object.assign({}, settings, {\n                                        variables: varStore,\n                                        onWarning: handleWarning\n                                    }));\n\n                                    const outCss = stringifyCss(node.__cssVars.tree);\n\n                                    if (settings.updateDOM) {\n                                        if (!node.getAttribute('data-cssvars')) {\n                                            node.setAttribute('data-cssvars', 'src');\n                                        }\n\n                                        if (outCss.length) {\n                                            const dataGroup       = node.getAttribute('data-cssvars-group') || ++counters.group;\n                                            const outCssNoSpaces = outCss.replace(/\\s/g,'');\n                                            const outNode        = settings.rootElement.querySelector(`[data-cssvars=\"out\"][data-cssvars-group=\"${dataGroup}\"]`) || document.createElement('style');\n\n                                            hasKeyframesWithVars = hasKeyframesWithVars || regex.cssKeyframes.test(outCss);\n\n                                            if (!outNode.hasAttribute('data-cssvars')) {\n                                                outNode.setAttribute('data-cssvars', 'out');\n                                            }\n\n                                            // Non-transformed CSS\n                                            if (outCssNoSpaces === node.textContent.replace(/\\s/g,'')) {\n                                                isSkip = true;\n\n                                                if (outNode && outNode.parentNode) {\n                                                    node.removeAttribute('data-cssvars-group');\n                                                    outNode.parentNode.removeChild(outNode);\n                                                }\n                                            }\n                                            // Transformed CSS\n                                            else if (outCssNoSpaces !== outNode.textContent.replace(/\\s/g,'')) {\n                                                [node, outNode].forEach(n => {\n                                                    n.setAttribute('data-cssvars-job', counters.job);\n                                                    n.setAttribute('data-cssvars-group', dataGroup);\n                                                });\n                                                outNode.textContent = outCss;\n                                                outCssArray.push(outCss);\n                                                outNodeArray.push(outNode);\n\n                                                if (!outNode.parentNode) {\n                                                    node.parentNode.insertBefore(outNode, node.nextSibling);\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (node.textContent.replace(/\\s/g,'') !== outCss) {\n                                            outCssArray.push(outCss);\n                                        }\n                                    }\n                                }\n                                catch(err) {\n                                    handleError(err.message, node);\n                                }\n                            }\n\n                            if (isSkip) {\n                                node.setAttribute('data-cssvars', 'skip');\n                            }\n\n                            if (!node.hasAttribute('data-cssvars-job')) {\n                                node.setAttribute('data-cssvars-job', counters.job);\n                            }\n                        });\n\n                        // Update source node count\n                        cssVarsSrcNodeCount = settings.rootElement.querySelectorAll('[data-cssvars]:not([data-cssvars=\"out\"])').length;\n\n                        // Process shadow DOM\n                        if (settings.shadowDOM) {\n                            const elms = [\n                                settings.rootElement,\n                                ...settings.rootElement.querySelectorAll('*')\n                            ];\n\n                            // Iterates over all elements in rootElement and calls\n                            // cssVars on each shadowRoot, passing document-level\n                            // custom properties as options.variables.\n                            for (let i = 0, elm; (elm = elms[i]); ++i) {\n                                if (elm.shadowRoot && elm.shadowRoot.querySelector('style')) {\n                                    const shadowSettings = Object.assign({}, settings, {\n                                        rootElement: elm.shadowRoot\n                                    });\n\n                                    cssVars(shadowSettings);\n                                }\n                            }\n                        }\n\n                        // Fix keyframes\n                        if (settings.updateDOM && hasKeyframesWithVars) {\n                            fixKeyframes(settings.rootElement);\n                        }\n\n                        // Reset running flag. Must be done before onComplete\n                        // callback to avoid a callback error preventing the\n                        // flag from being reset after the callback.\n                        cssVarsIsRunning = false;\n\n                        // Callback\n                        settings.onComplete(\n                            outCssArray.join(''),\n                            outNodeArray,\n                            JSON.parse(JSON.stringify(varStore)),\n                            getTimeStamp() - settings.__benchmark\n                        );\n                    }\n                }\n            });\n        }\n    }\n    // Delay function until DOMContentLoaded event is fired\n    /* istanbul ignore next */\n    else {\n        document.addEventListener('DOMContentLoaded', function init(evt) {\n            cssVars(options);\n\n            document.removeEventListener('DOMContentLoaded', init);\n        });\n    }\n}\n\n// Ponyfill reset\ncssVars.reset = function() {\n    // Reset running flag\n    cssVarsIsRunning = false;\n\n    // Disconnect MutationObserver\n    if (cssVarsObserver) {\n        cssVarsObserver.disconnect();\n        cssVarsObserver = null;\n    }\n\n    // Reset source node count\n    cssVarsSrcNodeCount = 0;\n\n    // Reset debounce timer\n    debounceTimer = null;\n\n    // Reset shadowDOM ready flag\n    isShadowDOMReady = false;\n\n    // Reset variable storage\n    for (const prop in variableStore) {\n        variableStore[prop] = {};\n    }\n};\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Creates mutation observer that executes the ponyfill when a <link> or <style>\n * DOM mutation is observed.\n *\n * @param {object} settings\n */\nfunction addMutationObserver(settings) {\n    function isLink(node) {\n        const isStylesheet = node.tagName === 'LINK' && (node.getAttribute('rel') || '').indexOf('stylesheet') !== -1;\n\n        return isStylesheet && !node.disabled;\n    }\n    function isStyle(node) {\n        return node.tagName === 'STYLE' && !node.disabled;\n    }\n    function isValidAddMutation(mutationNodes) {\n        return Array.apply(null, mutationNodes).some(node => {\n            const isElm           = node.nodeType === 1;\n            const hasAttr         = isElm && node.hasAttribute('data-cssvars');\n            const isStyleWithVars = isStyle(node) && regex.cssVars.test(node.textContent);\n            const isValid         = !hasAttr && (isLink(node) || isStyleWithVars);\n\n            return isValid;\n        });\n    }\n    function isValidRemoveMutation(mutationNodes) {\n        return Array.apply(null, mutationNodes).some(node => {\n            const isElm     = node.nodeType === 1;\n            const isOutNode = isElm && node.getAttribute('data-cssvars') === 'out';\n            const isSrcNode = isElm && node.getAttribute('data-cssvars') === 'src';\n            const isValid   = isSrcNode;\n\n            if (isSrcNode || isOutNode) {\n                const dataGroup  = node.getAttribute('data-cssvars-group');\n                const orphanNode = settings.rootElement.querySelector(`[data-cssvars-group=\"${dataGroup}\"]`);\n\n                if (isSrcNode) {\n                    resetCssNodes(settings.rootElement);\n                    variableStore.dom = {};\n                }\n\n                if (orphanNode) {\n                    orphanNode.parentNode.removeChild(orphanNode);\n                }\n            }\n\n            return isValid;\n        });\n    }\n\n    if (!window.MutationObserver) {\n        return;\n    }\n\n    if (cssVarsObserver) {\n        cssVarsObserver.disconnect();\n        cssVarsObserver = null;\n    }\n\n    cssVarsObserver = new MutationObserver(function(mutations) {\n        const hasValidMutation = mutations.some((mutation) => {\n            let isValid = false;\n\n            if (mutation.type === 'attributes') {\n                isValid = isLink(mutation.target);\n            }\n            else if (mutation.type === 'childList') {\n                isValid = isValidAddMutation(mutation.addedNodes) || isValidRemoveMutation(mutation.removedNodes);\n            }\n\n            return isValid;\n        });\n\n        if (hasValidMutation) {\n            cssVars(settings);\n        }\n    });\n\n    cssVarsObserver.observe(document.documentElement, {\n        attributes     : true,\n        attributeFilter: ['disabled', 'href'],\n        childList      : true,\n        subtree        : true\n    });\n}\n\n/**\n * Debounces cssVars() calls\n *\n * @param {object} settings\n */\nfunction cssVarsDebounced(settings, delay = 100) {\n    clearTimeout(debounceTimer);\n    debounceTimer = setTimeout(function() {\n        settings.__benchmark = null;\n        cssVars(settings);\n    }, delay);\n}\n\n/**\n * Fixes issue with keyframe properties set using CSS custom property not being\n * applied properly in some legacy (IE) and modern (Safari) browsers.\n *\n * @param {object} rootElement\n */\nfunction fixKeyframes(rootElement) {\n    const animationNameProp = [\n        'animation-name',\n        '-moz-animation-name',\n        '-webkit-animation-name'\n    ].filter(prop => getComputedStyle(document.body)[prop])[0];\n\n    if (animationNameProp) {\n        const allNodes      = rootElement.getElementsByTagName('*');\n        const keyframeNodes = [];\n        const nameMarker    = '__CSSVARSPONYFILL-KEYFRAMES__';\n\n        // Modify animation name\n        for (let i = 0, len = allNodes.length; i < len; i++) {\n            const node          = allNodes[i];\n            const animationName = getComputedStyle(node)[animationNameProp];\n\n            if (animationName !== 'none') {\n                node.style[animationNameProp] += nameMarker;\n                keyframeNodes.push(node);\n            }\n        }\n\n        // Force reflow\n        void document.body.offsetHeight;\n\n        // Restore animation name\n        for (let i = 0, len = keyframeNodes.length; i < len; i++) {\n            const nodeStyle = keyframeNodes[i].style;\n\n            nodeStyle[animationNameProp] = nodeStyle[animationNameProp].replace(nameMarker, '');\n        }\n    }\n}\n\n/**\n * Convert relative CSS url(...) values to absolute based on baseUrl\n *\n * @param {string} cssText\n * @param {string} baseUrl\n * @returns {string}\n */\nfunction fixRelativeCssUrls(cssText, baseUrl) {\n    const cssUrls = cssText\n        // Remove comments\n        .replace(regex.cssComments, '')\n        // Match url(...) values\n        .match(regex.cssUrls) || [];\n\n    cssUrls.forEach(cssUrl => {\n        const oldUrl = cssUrl.replace(regex.cssUrls, '$1');\n        const newUrl = getFullUrl(oldUrl, baseUrl);\n\n        cssText = cssText.replace(cssUrl, cssUrl.replace(oldUrl, newUrl));\n    });\n\n    return cssText;\n}\n\n/**\n * Converts all object property names to leading '--' style\n *\n * @param {object} varObj Object containing CSS custom property name:value pairs\n * @returns {object}\n */\nfunction fixVarNames(varObj = {}) {\n    const reLeadingHyphens = /^-{2}/;\n\n    return Object.keys(varObj).reduce((obj, value) => {\n        const key = reLeadingHyphens.test(value) ? value : `--${value.replace(/^-+/, '')}`;\n\n        obj[key] = varObj[value];\n\n        return obj;\n    }, {});\n}\n\n/**\n * Returns fully qualified URL from relative URL and (optional) base URL\n *\n * @param   {string} url\n * @param   {string} [base=location.href]\n * @returns {string}\n */\nfunction getFullUrl(url, base = location.href) {\n    const d = document.implementation.createHTMLDocument('');\n    const b = d.createElement('base');\n    const a = d.createElement('a');\n\n    d.head.appendChild(b);\n    d.body.appendChild(a);\n    b.href = base;\n    a.href = url;\n\n    return a.href;\n}\n\n/**\n * Returns a time stamp in milliseconds\n *\n * @returns {number}\n */\nfunction getTimeStamp() {\n    return isBrowser && (window.performance || {}).now ? window.performance.now() : new Date().getTime();\n}\n\nfunction resetCssNodes(rootElement) {\n    const resetNodes = Array.apply(null, rootElement.querySelectorAll('[data-cssvars=\"skip\"],[data-cssvars=\"src\"]'));\n\n    resetNodes.forEach(node => node.setAttribute('data-cssvars', ''));\n}\n\n\n// Export\n// =============================================================================\nexport default cssVars;\n"],"names":["getUrls","urls","options","arguments","length","undefined","settings","mimeType","onBeforeSend","Function","prototype","onSuccess","onError","onComplete","urlArray","Array","isArray","urlQueue","apply","map","x","isValidCss","trim","charAt","xhr","urlIndex","responseText","returnVal","indexOf","parser","document","createElement","forEach","url","i","setAttribute","href","String","Boolean","all","window","atob","host","split","location","protocol","xdr","XDomainRequest","open","timeout","onprogress","ontimeout","onload","onerror","err","setTimeout","send","console","warn","concat","XMLHttpRequest","overrideMimeType","onreadystatechange","readyState","status","getCssData","regex","cssComments","cssImports","rootElement","include","exclude","filter","useCSSOM","sourceNodes","querySelectorAll","node","elm","selector","matches","matchesSelector","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","call","cssArray","handleComplete","cssText","join","handleSuccess","cssIndex","sourceUrl","resolveImports","baseUrl","callbackFn","__errorData","__errorRules","importData","parseImportData","rules","absoluteUrls","responseImportData","rule","replace","absoluteRules","push","responseArray","importText","resolvedCssText","errorData","data","test","ignoreRules","match","getFullUrl","oldUrl","newUrl","linkHref","getAttribute","linkRel","isLink","nodeName","toLowerCase","isStyle","textContent","sheet","cssRules","base","d","implementation","createHTMLDocument","b","a","head","appendChild","body","balanced","str","RegExp","maybeMatch","r","range","start","end","pre","slice","post","reg","m","begs","beg","left","right","result","ai","bi","pop","parseCss","css","_extends","preserveStatic","removeComments","error","msg","Error","re","exec","close","whitespace","comment","type","comments","c","cmnts","s","declaration","comment_regexp","prop","val","ret","property","value","declarations","decls","keyframe","vals","values","at_rule","vendor","frame","name","frames","keyframes","at_keyframes","supports","at_supports","at_host","media","at_media","at_custom_m","selectors","at_page","at_document","at_fontface","at_x","hasVarFunc","some","decl","obj","balancedMatch","hasVarDecl","sel","core","stylesheet","errors","parseVars","cssData","parseHost","store","onWarning","reVarDeclSelectors","stringifyCss","tree","delim","cb","renderMethods","charset","visit","import","namespace","page","nodes","buf","n","txt","VAR_PROP_IDENTIFIER","VAR_FUNC_IDENTIFIER","transformCss","preserveVars","variables","walkCss","fn","resolvedValue","resolveValue","fixNestedCalc","splice","newVal","__recursiveFallback","valueData","fallback","Object","hasOwnProperty","replacement","unresolvedFallback","resolveFunc","isBrowser","isNativeSupport","CSS","counters","group","job","defaults","shadowDOM","onlyLegacy","silent","updateDOM","updateURLs","watch","cssKeyframes","cssMediaQueries","cssUrls","cssVarDeclRules","cssVarDecls","cssVarFunc","cssVars","variableStore","dom","user","cssVarsIsRunning","cssVarsObserver","cssVarsSrcNodeCount","debounceTimer","isShadowDOMReady","msgPrefix","handleError","message","sourceNode","handleWarning","tagName","disabled","MutationObserver","disconnect","mutations","mutation","mutationNodes","isValid","target","addedNodes","hasAttr","nodeType","hasAttribute","isStyleWithVars","isElm","isOutNode","isSrcNode","dataGroup","orphanNode","querySelector","resetCssNodes","parentNode","removeChild","isValidRemoveMutation","removedNodes","observe","documentElement","attributes","attributeFilter","childList","subtree","addMutationObserver","__benchmark","delay","clearTimeout","cssVarsDebounced","getTimeStamp","varObj","reLeadingHyphens","keys","reduce","fixVarNames","outNode","srcNodes","targetElm","key","style","setProperty","shadowRoot","nodeArray","responseUrl","responseURL","statusText","cssUrl","fixRelativeCssUrls","jobVars","varStore","JSON","parse","stringify","hasVarChange","cssTree","__cssVars","outCssArray","outNodeArray","hasKeyframesWithVars","isSkip","outCss","outCssNoSpaces","removeAttribute","insertBefore","nextSibling","elms","shadowSettings","fixKeyframes","addEventListener","init","evt","removeEventListener","animationNameProp","getComputedStyle","allNodes","getElementsByTagName","keyframeNodes","len","offsetHeight","nodeStyle","performance","now","Date","getTime","reset"],"mappings":"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"}