{"version":3,"file":"validateProperties.js","sourceRoot":"","sources":["../../src/validateProperties.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAClC,IAAM,iBAAiB,GAAG,IAAI,CAAC;AAE/B,IAAM,cAAc,GAAG,UAAC,UAAkC;IACxD,IAAI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,GAAG,iBAAiB,EAAE;QACtD,MAAM,CAAC,IAAI,CAAC,yCAAyC,CAAC,CAAC;QACvD,OAAO,KAAK,CAAC;KACd;IACD,KAAK,IAAM,GAAG,IAAI,UAAU,EAAE;QAC5B,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;YAC3B,MAAM,CAAC,IAAI,CAAC,+CAA+C,CAAC,CAAC;YAC7D,OAAO,KAAK,CAAC;SACd;QACD,IAAM,KAAK,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;QAC9B,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,KAAK,CAAC;YAAE,OAAO,KAAK,CAAC;KAClD;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,IAAM,iBAAiB,GAAG,UAAC,QAAgB,EAAE,KAAU;;IACrD,IAAI,OAAO,QAAQ,KAAK,QAAQ;QAAE,OAAO,KAAK,CAAC;IAC/C,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;;YACxB,KAA2B,IAAA,UAAA,SAAA,KAAK,CAAA,4BAAA,+CAAE;gBAA7B,IAAM,YAAY,kBAAA;gBACrB,IAAI,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;oBAC/B,MAAM,CAAC,IAAI,CAAC,6BAA6B,EAAE,OAAO,YAAY,CAAC,CAAC;oBAChE,OAAO,KAAK,CAAC;iBACd;qBAAM,IAAI,OAAO,YAAY,KAAK,QAAQ,EAAE;oBAC3C,OAAO,cAAc,CAAC,KAAK,CAAC,CAAC;iBAC9B;qBAAM,IAAI,CAAC,CAAC,OAAO,YAAY,KAAK,QAAQ,IAAI,OAAO,YAAY,KAAK,QAAQ,CAAC,EAAE;oBAClF,MAAM,CAAC,IAAI,CAAC,6BAA6B,EAAE,OAAO,YAAY,CAAC,CAAC;oBAChE,OAAO,KAAK,CAAC;iBACd;aACF;;;;;;;;;KACF;SAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QACpC,OAAO,cAAc,CAAC,KAAK,CAAC,CAAC;KAC9B;SAAM,IAAI,CAAC,CAAC,OAAO,KAAK,KAAK,QAAQ,IAAI,OAAO,KAAK,KAAK,QAAQ,CAAC,EAAE;QACpE,MAAM,CAAC,IAAI,CAAC,qBAAqB,EAAE,OAAO,KAAK,CAAC,CAAC;QACjD,OAAO,KAAK,CAAC;KACd;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AACF,OAAO,EAAE,iBAAiB,EAAE,CAAC","sourcesContent":["import { logger } from './logger';\nconst MAX_PROPERTY_KEYS = 1000;\n\nconst _isValidObject = (properties: { [key: string]: any }): boolean => {\n  if (Object.keys(properties).length > MAX_PROPERTY_KEYS) {\n    logger.warn('too many properties. Skipping operation');\n    return false;\n  }\n  for (const key in properties) {\n    if (typeof key !== 'string') {\n      logger.warn('invalid properties format. Skipping operation');\n      return false;\n    }\n    const value = properties[key];\n    if (!isValidProperties(key, value)) return false;\n  }\n  return true;\n};\n\nconst isValidProperties = (property: string, value: any): boolean => {\n  if (typeof property !== 'string') return false;\n  if (Array.isArray(value)) {\n    for (const valueElement of value) {\n      if (Array.isArray(valueElement)) {\n        logger.warn('invalid array element type ', typeof valueElement);\n        return false;\n      } else if (typeof valueElement === 'object') {\n        return _isValidObject(value);\n      } else if (!(typeof valueElement === 'number' || typeof valueElement === 'string')) {\n        logger.warn('invalid array element type ', typeof valueElement);\n        return false;\n      }\n    }\n  } else if (typeof value === 'object') {\n    return _isValidObject(value);\n  } else if (!(typeof value === 'number' || typeof value === 'string')) {\n    logger.warn('invalid value type ', typeof value);\n    return false;\n  }\n  return true;\n};\nexport { isValidProperties };\n"]}