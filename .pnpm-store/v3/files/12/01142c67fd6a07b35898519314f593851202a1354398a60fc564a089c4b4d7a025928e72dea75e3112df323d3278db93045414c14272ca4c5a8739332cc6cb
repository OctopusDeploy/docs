{"version":3,"file":"response.js","sourceRoot":"","sources":["../../src/response.ts"],"names":[],"mappings":";;AAAA,mCAAkC;AA0ElC;;GAEG;AACU,QAAA,gBAAgB,GAAa;IACxC,MAAM,EAAE,eAAM,CAAC,OAAO;IACtB,UAAU,EAAE,CAAC;CACd,CAAC","sourcesContent":["import { Status } from './status';\n\n/** A response body for a request that returned 200 (successful). */\nexport interface SuccessBody {\n  eventsIngested: number;\n  payloadSizeBytes: number;\n  serverUploadTime: number;\n}\n\n/** A response body for a request that returned 413 (invalid request). */\nexport interface InvalidRequestBody {\n  error: string;\n  missingField: string | null;\n  eventsWithInvalidFields: { [eventField: string]: number[] };\n  eventsWithMissingFields: { [eventField: string]: number[] };\n}\n\n/** A response body for a request that returned 413 (payload too large). */\nexport interface PayloadTooLargeBody {\n  error: string;\n}\n\n/** A response body for a request that returned 429 (rate limit). */\nexport interface RateLimitBody {\n  error: string;\n  epsThreshold: number;\n  throttledDevices: { [deviceId: string]: number };\n  throttledUsers: { [userId: string]: number };\n  exceededDailyQuotaDevices: { [deviceId: string]: number };\n  exceededDailyQuotaUsers: { [userId: string]: number };\n  throttledEvents: number[];\n}\n\nexport type StatusWithResponseBody = Status.Invalid | Status.PayloadTooLarge | Status.RateLimit | Status.Success;\n\n/** Represents additional data that is provided by the http v2 API */\nexport type ResponseBody = SuccessBody | InvalidRequestBody | PayloadTooLargeBody | RateLimitBody;\n\n/** JSDoc */\nexport type Response =\n  | {\n      status: Status.Success;\n      statusCode: number;\n      body?: SuccessBody;\n    }\n  | {\n      status: Status.Invalid;\n      statusCode: number;\n      body?: InvalidRequestBody;\n    }\n  | {\n      status: Status.PayloadTooLarge;\n      statusCode: number;\n      body?: PayloadTooLargeBody;\n    }\n  | {\n      status: Status.RateLimit;\n      statusCode: number;\n      body?: RateLimitBody;\n    }\n  | {\n      status: Status.Timeout;\n      statusCode: number;\n    }\n  | {\n      status: Exclude<Status, StatusWithResponseBody>;\n      statusCode: number;\n    }\n  | {\n      status: Status.SystemError;\n      statusCode: 0;\n      error: NodeJS.ErrnoException;\n    };\n\n/** The Response to expect if a request might have been sent but it was skipped\n *  e.g. no events to flush, user has opted out and nothing should be sent.\n */\nexport const SKIPPED_RESPONSE: Response = {\n  status: Status.Skipped,\n  statusCode: 0,\n};\n"]}