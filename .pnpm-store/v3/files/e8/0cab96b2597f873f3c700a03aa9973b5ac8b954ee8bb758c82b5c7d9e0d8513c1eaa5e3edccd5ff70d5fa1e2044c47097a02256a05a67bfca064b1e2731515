{"version":3,"file":"misc.js","sourceRoot":"","sources":["../../src/misc.ts"],"names":[],"mappings":";AAAA;;;;GAIG;AACH,MAAM,UAAU,SAAS;;IACvB,OAAO,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,0CAAE,IAAI,MAAK,SAAS,CAAC;AAC9E,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,YAAY;IAC1B,OAAO,OAAO,MAAM,KAAK,QAAQ,IAAI,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,QAAQ,MAAK,SAAS,CAAC;AACtE,CAAC;AAED,IAAM,oBAAoB,GAAG,EAAE,CAAC;AAEhC;;;;GAIG;AACH,MAAM,CAAC,IAAM,eAAe,GAAG;IAC7B,IAAI,SAAS,EAAE,EAAE;QACf,OAAO,MAAM,CAAC;KACf;SAAM,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;QACxC,OAAO,MAAM,CAAC;KACf;SAAM,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;QACtC,OAAO,IAAI,CAAC;KACb;SAAM;QACL,OAAO,oBAAoB,CAAC;KAC7B;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,IAAM,2BAA2B,GAAG;IACzC,IAAM,MAAM,GAAG,eAAe,EAAE,CAAC;IACjC,IAAI,MAAM,CAAC,aAAa,KAAK,SAAS,EAAE;QACtC,MAAM,CAAC,aAAa,GAAG,EAAE,CAAC;KAC3B;IAED,OAAO,MAAM,CAAC,aAAa,CAAC;AAC9B,CAAC,CAAC;AAEF;;;;;GAKG;AACH,MAAM,CAAC,IAAM,UAAU,GAAG,UAAO,YAAoB;;;oBAC5C,qBAAM,IAAI,OAAO,CAAC,UAAA,OAAO,IAAI,OAAA,UAAU,CAAC,OAAO,EAAE,YAAY,CAAC,EAAjC,CAAiC,CAAC,EAAA;oBAAtE,sBAAO,SAA+D,EAAC;;;KACxE,CAAC;AAEF;;;;GAIG;AACH,MAAM,CAAC,IAAM,cAAc,GAAG;;IAQ5B,IAAI,YAAY,EAAE,EAAE;QAClB,IAAM,eAAe,GAAG,MAAgB,CAAC;QACzC,IAAM,cAAc,GAAG,KAAyB,CAAC;QACjD,IAAI,eAAe,CAAC,SAAS,KAAK,SAAS,IAAI,OAAA,cAAc,CAAC,SAAS,0CAAE,MAAM,MAAK,SAAS,EAAE;YAC7F,OAAO,cAAc,CAAC,SAAS,CAAC,MAAM,CAAC;YACvC,OAAO,IAAI,CAAC;SACb;KACF;IACD,OAAO,KAAK,CAAC;AACf,CAAC,CAAC","sourcesContent":["/**\n * Checks whether we're in a Node.js environment\n *\n * @returns Answer to given question\n */\nexport function isNodeEnv(): boolean {\n  return typeof process === 'object' && process?.versions?.node !== undefined;\n}\n\n/**\n * Checks whether we're in a browser environment\n *\n * @returns Answer to given question\n */\nexport function isBrowserEnv(): boolean {\n  return typeof window === 'object' && window?.document !== undefined;\n}\n\nconst fallbackGlobalObject = {};\n\n/**\n * Safely get global scope object\n *\n * @returns Global scope object\n */\nexport const getGlobalObject = (): any => {\n  if (isNodeEnv()) {\n    return global;\n  } else if (typeof window !== 'undefined') {\n    return window;\n  } else if (typeof self !== 'undefined') {\n    return self;\n  } else {\n    return fallbackGlobalObject;\n  }\n};\n\nexport const getGlobalAmplitudeNamespace = (): any => {\n  const global = getGlobalObject();\n  if (global.__AMPLITUDE__ === undefined) {\n    global.__AMPLITUDE__ = {};\n  }\n\n  return global.__AMPLITUDE__;\n};\n\n/**\n * A promise-based way to sleep for x millseconds, then queue ourselves back to the\n * JS event loop.\n *\n * @param milliseconds The number of milliseconds to wait for\n */\nexport const asyncSleep = async (milliseconds: number): Promise<void> => {\n  return await new Promise(resolve => setTimeout(resolve, milliseconds));\n};\n\n/**\n * Fixes browser edge case where Prototype.js injects Array.prototype.toJSON and breaks the built-in JSON.stringify()\n *\n * @returns true if Array.prototype.toJSON was deleted, false if not\n */\nexport const prototypeJsFix = (): boolean => {\n  // Augment and cast built-ins to represent Prototype.js injection\n  interface Window {\n    Prototype?: Record<string, any>;\n  }\n  interface ArrayConstructor {\n    prototype?: { toJSON?: Function };\n  }\n  if (isBrowserEnv()) {\n    const augmentedWindow = window as Window;\n    const augmentedArray = Array as ArrayConstructor;\n    if (augmentedWindow.Prototype !== undefined && augmentedArray.prototype?.toJSON !== undefined) {\n      delete augmentedArray.prototype.toJSON;\n      return true;\n    }\n  }\n  return false;\n};\n"]}